Lamest Game — Nova Análise do Projeto (GPT)

Visão Geral
- Framework: Angular 17 + RxJS; lógica de domínio TypeScript sob `src/backend/` consumida pela UI.
- Arquitetura: camadas bem definidas com Entities, Behaviors, Rules, Policies, Stores e Events. UI orquestrada por `GameLoopService` e serviços auxiliares.
- Rendering/Feedback: painéis e widgets (interactive, actor, reactive, status, timeline, image-viewer), toasts (`ngx-toastr`), áudio (`howler`), animações (GSAP), barras de progresso animadas.

Domínio/Backend
- Entities/Services: `ActorEntity`, `SceneEntity`, `InteractiveEntity`, `GameLoopService`, `CharacterService`, `InventoryService`, `RPGService`, `NarrativeService`.
- Behaviors/Rules/Policies: comportamento de AI, cooldown/regeneration/equipment; regras (`affect`, `skill`, `pick`, `wear`, `strip`, `read`, etc.) com Policies convertendo resultados em efeitos e logs.
- Stores/Literals: strings, mensagens, cenas, itens e configurações centralizadas; literais/definitions fortes para evitar drift de texto.
- Eventos: eventos de domínio e combate sustentam integrações com UI e feedback.

Frontend/UI
- Página: `GamePageComponent` assina eventos e atualiza view-models; integra numeração flutuante e timeline de combate.
- Widgets: 
  - Interactive: cartão rico com ícones de comportamento, detecção, mini-barras HP/EP/AP, chips/aprimoramentos de ação (AP cost, cooldown, ENG) e tooltips de contexto.
  - Actor/Reactive: cartões especializados e simplificados focados em apresentação de ações básicas.
- Feedback/Animação: Floating numbers ancorados aos alvos com estilos por tipo de dano; progress bar animada; mapeamento de sons por categoria parcial.

Fluxo de Dados
- Ações (Player/AI) → Rules → Policies → Atualizações de estado + logs/eventos → UI (widgets, toasts, sons, animações).
- Trabalho em andamento para eventos estruturados de combate reduzir dependência de parsing de logs.

Qualidade/Testes
- Extensa suíte de testes em regras/serviços/estados; specs de componentes essenciais; TS em modo estrito e aliases por caminho.

Melhorias Recentes Observadas
- Floating numbers: regex aprimorado, ancoragem por alvo, cores por subtipo (KINETIC/FIRE/ACID/PROFANE/SACRED), inicialização antecipada de refs.
- Interactive Widget: mini-barras HP/EP/AP, ícones de comportamento, detecção de HIDDEN/DISGUISED, chips de custo AP, cooldown e ENG com timers e desabilitação condicional.

Itens Perdidos (conforme lost_features.txt)
- Ícones de comportamento AI: RETALIATE, AGGRESSIVE, PLAYER com tooltips dedicados.
- Barras de status HP/EP/AP: barras responsivas com labels e valores (condicionais a derived attributes).
- Chips de status e timers: AP cost, cooldown (CD s), engagement (ENG s) e ENG chip ativo.
- Detecção de habilidades especiais: Detect Disguised/Hidden conforme capacidades do personagem.
- Sistema de cooldown/engagement: desabilitar botões durante cooldown/engajamento, timers reativos e tooltips explicativas.
- Sistema de custos/recursos: `canAfford(action)` e tooltips de custo (`apTooltipSuffix`).
- Ícones de ações melhorados: mapeamento detalhado por tipo (`setIcon`) com imagens/ícones e tooltips informativas.
- Layout avançado: meta-row (comportamento + detecção), mini-bars separadas e botão com chips.
- Onde falta: esses recursos estão presentes no `InteractiveWidget`, mas foram perdidos/omitidos nos widgets especializados `Actor` e `Reactive` (componentes estão básicos, com emojis e sem timers/custos/barras).

Riscos/Gaps
- Parsing de logs para feedback visual ainda existe em pontos: eventos estruturados devem substituir regex.
- Inconsistência de UX entre widgets: `Interactive` rico vs. `Actor`/`Reactive` minimalistas sem barras/ícones/chips.
- Sincronização parcial de sons/animações por tipo de evento/efeito.

Oportunidades/Prioridades
- Unificar UX dos widgets: portar barras HP/EP/AP, ícones de AI, detecção, chips AP/CD/ENG e validações para `ActorWidget` e `ReactiveWidget` (reutilizar helpers de `InteractiveWidget`).
- Eventos estruturados de combate end-to-end: garantir emissão e consumo em UI, eliminando parsing de logs.
- Componentizar chips/badges: `status-chip` e `cooldown-badge` reutilizáveis com `OnPush`.
- Tooltips acessíveis: mensagens claras de indisponibilidade (AP insuficiente, cooldown, engajamento) com ARIA.
- Sons/Feedback: mapear mais efeitos e outcomes (MISS/DODGE/CRIT) a sons/anim.

Próximos Passos Sugeridos
- P0: Replicar no `ActorWidget` e `ReactiveWidget` os recursos listados em “Itens Perdidos” (AP/CD/ENG, mini-barras, ícones AI, detecção, `canAfford`, tooltips) usando os mesmos serviços/stores (CharacterService, SettingsStore, GameStringsStore).
- P1: Consolidar eventos estruturados de combate e conectar UI (CombatFeed/Timeline) para remover regex.
- P2: Componentizar chips/barras e aplicar `ChangeDetectionStrategy.OnPush` nos widgets de display.
- P3: Expandir mapeamento de som/efeito e microinterações (flash de borda por tipo de dano, MISS/DODGE overlays).

Resumo
- O domínio é robusto e testável; a UI evoluiu bem no `InteractiveWidget`.
- Para consistência e clareza, é prioritário alinhar `Actor`/`Reactive` ao nível de UX do `Interactive`, exatamente nos pontos levantados em `lost_features.txt`.
